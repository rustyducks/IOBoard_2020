/*
 * VL6180X.h
 * 
 * driver for the VL6180X, tof range and ambiant light sensor
 * NOTE : this driver only support single-shot ranging (no continuous, no ambiant light)
 * See "AN4545 - VL6180X basic ranging application note"
 * (https://www.st.com/content/ccc/resource/technical/document/application_note/d5/bb/ec/94/7d/1e/40/a0/DM00122600.pdf/files/DM00122600.pdf/jcr:content/translations/en.DM00122600.pdf)
 *
 *  Created on: 4 Dec 2019
 *      Author: fabien
 */

#if !defined(VLX6180X_H_)
#define VLX6180X_H_

#include <ch.h>
#include <hal.h>
#include <stdint.h>

#define VL6180X_IDENTIFICATION_MODEL_ID 0x0000
#define VL6180X_IDENTIFICATION_MODEL_REV_MAJOR 0x0001
#define VL6180X_IDENTIFICATION_MODEL_REV_MINOR 0x0002
#define VL6180X_IDENTIFICATION_MODULE_REV_MAJOR 0x0003
#define VL6180X_IDENTIFICATION_MODULE_REV_MINOR 0x0004
#define VL6180X_IDENTIFICATION_DATE_HI 0x0006
#define VL6180X_IDENTIFICATION_DATE_LO 0x0007
#define VL6180X_IDENTIFICATION_TIME 0x0008
#define VL6180X_SYSTEM_MODE_GPIO0 0x0010
#define VL6180X_SYSTEM_MODE_GPIO1 0x0011
#define VL6180X_SYSTEM_HISTORY_CTRL 0x0012
#define VL6180X_SYSTEM_INTERRUPT_CONFIG_GPIO 0x0014
#define VL6180X_SYSTEM_INTERRUPT_CLEAR 0x0015
#define VL6180X_SYSTEM_FRESH_OUT_OF_RESET 0x0016
#define VL6180X_SYSTEM_GROUPED_PARAMETER_HOLD 0x0017
#define VL6180X_SYSRANGE_START 0x0018
#define VL6180X_SYSRANGE_THRESH_HIGH 0x0019
#define VL6180X_SYSRANGE_THRESH_LOW 0x001A
#define VL6180X_SYSRANGE_INTERMEASUREMENT_PERIOD 0x001B
#define VL6180X_SYSRANGE_MAX_CONVERGENCE_TIME 0x001C
#define VL6180X_SYSRANGE_CROSSTALK_COMPENSATION_RATE 0x001E
#define VL6180X_SYSRANGE_CROSSTALK_VALID_HEIGHT 0x0021
#define VL6180X_SYSRANGE_EARLY_CONVERGENCE_ESTIMATE 0x0022
#define VL6180X_SYSRANGE_PART_TO_PART_RANGE_OFFSET 0x0024
#define VL6180X_SYSRANGE_RANGE_IGNORE_VALID_HEIGHT 0x0025
#define VL6180X_SYSRANGE_RANGE_IGNORE_THRESHOLD 0x0026
#define VL6180X_SYSRANGE_MAX_AMBIENT_LEVEL_MULT 0x002C
#define VL6180X_SYSRANGE_RANGE_CHECK_ENABLES 0x002D
#define VL6180X_SYSRANGE_VHV_RECALIBRATE 0x002E
#define VL6180X_SYSRANGE_VHV_REPEAT_RATE 0x0031
#define VL6180X_SYSALS_START 0x0038
#define VL6180X_SYSALS_THRESH_HIGH 0x003A
#define VL6180X_SYSALS_THRESH_LOW 0x003C
#define VL6180X_SYSALS_INTERMEASUREMENT_PERIOD 0x003E
#define VL6180X_SYSALS_ANALOGUE_GAIN 0x003F
#define VL6180X_SYSALS_INTEGRATION_PERIOD 0x0040
#define VL6180X_RESULT_RANGE_STATUS 0x004D
#define VL6180X_RESULT_ALS_STATUS 0x004E
#define VL6180X_RESULT_INTERRUPT_STATUS_GPIO 0x004F
#define VL6180X_RESULT_ALS_VAL 0x0050
#define VL6180X_RESULT_HISTORY_BUFFER_x 0x0052
#define VL6180X_RESULT_RANGE_VAL 0x0062
#define VL6180X_RESULT_RANGE_RAW 0x0064
#define VL6180X_RESULT_RANGE_RETURN_RATE 0x0066
#define VL6180X_RESULT_RANGE_REFERENCE_RATE 0x0068
#define VL6180X_RESULT_RANGE_RETURN_SIGNAL_COUNT 0x006C
#define VL6180X_RESULT_RANGE_REFERENCE_SIGNAL_COUNT 0x0070
#define VL6180X_RESULT_RANGE_RETURN_AMB_COUNT 0x0074
#define VL6180X_RESULT_RANGE_REFERENCE_AMB_COUNT 0x0078
#define VL6180X_RESULT_RANGE_RETURN_CONV_TIME 0x007C
#define VL6180X_RESULT_RANGE_REFERENCE_CONV_TIME 0x0080
#define VL6180X_READOUT_AVERAGING_SAMPLE_PERIOD 0x010A
#define VL6180X_FIRMWARE_BOOTUP 0x0119
#define VL6180X_FIRMWARE_RESULT_SCALER 0x0120
#define VL6180X_I2C_SLAVE_DEVICE_ADDRESS 0x0212
#define VL6180X_INTERLEAVED_MODE_ENABLE 0x02A3

#define VL6180X_DEFAULT_ADDR 0x29

class VL6180x {
public:

    enum RangeError {
        NO_ERROR = 0b000,
        VCSEL_CONTINUITY_TEST = 0b0001,
        VCSEL_WATCHDOG_TEST = 0b0010,
        VCSEL_WATCHDOG = 0b0011,
        PLL1_LOCK = 0b0100,
        PLL2_LOCK = 0b0101,
        EARLY_CONVERGENCE_ESTIMATE = 0b0110,
        MAX_CONVERGENCE = 0b0111,
        NO_TARGET_IGNORE = 0b1000,
        MAX_SIGNAL_TO_NOISE_RATIO = 0b1011,
        RAW_RANGING_ALGO_UNDERFLOW = 0b1100,
        RAW_RANGING_ALGO_OVERFLOW = 0b1101,
        RANGING_ALGO_UNDERFLOW = 0b1110,
        RANGING_ALGO_OVERFLOW = 0b1111,
    };

    int init(I2CDriver* i2cp, uint8_t addr=0x29);
    int do_single_shot(uint8_t* range, uint8_t* status);
    const char* get_error_msg(RangeError error);

private:
    int read_from(uint16_t reg, uint8_t* rxbuf, size_t rxbytes);
    int write(uint16_t reg, uint8_t* txbuf, size_t txbytes, uint8_t* rxbuf, size_t rxbytes);
    int load_sr_settings();

    i2caddr_t address;
    I2CDriver* i2c_driver;
};

extern VL6180x vl6180x;

#endif // VLX6180X_H_